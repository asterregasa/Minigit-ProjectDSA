#include <iostream>
#include <fstream>
#include <string>
#include <direct.h>  // for _mkdir
#include <ctime>     //for time
#include <vector>
#include <map>
#include <set>
#include <sstream>
#include <functional>
using namespace std;

// Data Structures 
struct Blob {
    string hash;
    string content;
};

struct CommitNode {
    string message;
    string timestamp;
    vector<pair<string, Blob>> files; // filename -> blob
    CommitNode* parent = nullptr;
    string hash;
};
struct Branch {
    string name;
    CommitNode* head;
};
// Globals 
map<string, Branch> branches;
Branch* currentBranch = nullptr;
vector<string> stagedFiles;

// Helpers 
string getCurrentTime() {
    time_t now = time(0);
    char* dt = ctime(&now);
    string result(dt);
    result.pop_back(); // Remove newline
    return result;
}

string readFile(const string& filename) {
    ifstream in(filename.c_str());
    if (!in) return "";
    stringstream buffer;
    buffer << in.rdbuf();
    return buffer.str();
}

void writeBlob(const string& content, const string& hash) {
    string path = ".minigit\\blobs\\" + hash;
    ofstream out(path.c_str());
    out << content;
}

string readBlob(const string& hash) {
    string path = ".minigit\\blobs\\" + hash;
    ifstream in(path.c_str());
    stringstream buffer;
    buffer << in.rdbuf();
    return buffer.str();
}
string computeHash(const string& content) {
    return to_string(hash<string>{}(content));
}

string generateHash(const CommitNode* node) {
    stringstream ss;
    ss << node->timestamp << node->message;
    for (auto& file : node->files)
        ss << file.first << file.second.hash;
    return computeHash(ss.str());
}

 // Commands
void init() {
    _mkdir(".minigit");
    _mkdir(".minigit\\blobs");

    CommitNode* first = new CommitNode();
    first->message = "Initial commit";
    first->timestamp = getCurrentTime();
    first->hash = generateHash(first);

    Branch mainBranch;
    mainBranch.name = "main";
    mainBranch.head = first;
    branches["main"] = mainBranch;
    currentBranch = &branches["main"];
    cout << "Repository initialized on branch 'main'\n";
}

void add(string filename) {
    ifstream file(filename.c_str());
    if (!file) {
        cout << "File does not exist.\n";
        return;
    }
    stagedFiles.push_back(filename);
    cout << "Staged: " << filename << "\n";
}
void commit(string message) {
    if (stagedFiles.empty()) {
        cout << "Nothing to commit.\n";
        return;
    }

    CommitNode* newCommit = new CommitNode();
    newCommit->message = message;
    newCommit->timestamp = getCurrentTime();
    newCommit->parent = currentBranch->head;

    // Copy parent files
    if (newCommit->parent && !newCommit->parent->files.empty()) {
        newCommit->files = newCommit->parent->files;
    }

    for (string fname : stagedFiles) {
        string content = readFile(fname);
        string hash = computeHash(content);
        writeBlob(content, hash);
        Blob blob = { hash, content };

        bool updated = false;
        for (auto& file : newCommit->files) {
            if (file.first == fname) {
                file.second = blob;
                updated = true;
                break;
            }
        }
        if (!updated)
            newCommit->files.push_back({ fname, blob });

        cout << "[Blob saved] " << fname << " â†’ " << hash << "\n";
    }

    newCommit->hash = generateHash(newCommit);
    currentBranch->head = newCommit;
    stagedFiles.clear();
    cout << "Committed: " << message << "\n";
}
void log() {
    CommitNode* current = currentBranch->head;
    while (current) {
        cout << "Commit hash: " << current->hash << "\n";
        cout << "Time: " << current->timestamp << "\n";
        cout << "Message: " << current->message << "\n\n";
        current = current->parent;
    }
}
void branch(string name) {
    if (branches.count(name)) {
        cout << "Branch already exists.\n";
        return;
    }
    Branch newBranch;
    newBranch.name = name;
    newBranch.head = currentBranch->head;
    branches[name] = newBranch;
    cout << "Branch '" << name << "' created.\n";
}

void checkout(string name) {
    if (!branches.count(name)) {
        cout << "Branch not found.\n";
        return;
    }
    currentBranch = &branches[name];
    cout << "Switched to branch: " << name << "\n";

    for (auto& file : currentBranch->head->files) {
        ofstream out(file.first.c_str());
        out << readBlob(file.second.hash);
    }
}
void merge(string otherBranchName) {
    if (!branches.count(otherBranchName)) {
        cout << "Branch not found.\n";
        return;
    }

    if (!currentBranch || !currentBranch->head) {
        cout << "Error: current branch not initialized.\n";
        return;
    }

    CommitNode* source = branches[otherBranchName].head;
    CommitNode* target = currentBranch->head;

    if (!source || !target) {
        cout << "Error: One of the branches has no commits.\n";
        return;
    }

    map<string, Blob> merged;

    // Load target (current branch) files into merged
    for (auto& f : target->files) {
        merged[f.first] = f.second;
    }

    // Merge in files from source branch
    for (auto& f : source->files) {
        if (!merged.count(f.first)) {
            // File only in source
            merged[f.first] = f.second;
        } else if (merged[f.first].hash != f.second.hash) {
            // Conflict detected
            cout << "Conflict in file: " << f.first << "\n";

            string currentContent = readBlob(merged[f.first].hash);
            string sourceContent = readBlob(f.second.hash);

            string conflictContent =
                "<<<<<<< CURRENT\n" + currentContent +
                "=======\n" + sourceContent +
                ">>>>>>> TARGET\n";

            Blob conflictBlob;
            conflictBlob.content = conflictContent;
            conflictBlob.hash = computeHash(conflictContent);

            writeBlob(conflictContent, conflictBlob.hash);

            merged[f.first] = conflictBlob;
        }
    }
    // Create merged commit
    CommitNode* mergedCommit = new CommitNode();
    mergedCommit->message = "Merged branch " + otherBranchName + " into " + currentBranch->name;
    mergedCommit->timestamp = getCurrentTime();
    mergedCommit->parent = currentBranch->head;

    for (auto& p : merged) {
        mergedCommit->files.push_back(make_pair(p.first, p.second));
    }

    mergedCommit->hash = generateHash(mergedCommit);
    currentBranch->head = mergedCommit;

    // Write merged files to working directory
    for (auto& f : merged) {
        ofstream out(f.first.c_str());
        if (out) {
            out << readBlob(f.second.hash);
            out.close();
        } else {
            cout << "Warning: Couldn't write merged file: " << f.first << "\n";
        }
    }

    cout << "Merge complete. Conflicts (if any) marked in files.\n";
}
void diff(string hash1, string hash2) {
    CommitNode* commit1 = nullptr;
    CommitNode* commit2 = nullptr;

    // Find commits by hash
    for (map<string, Branch>::iterator it = branches.begin(); it != branches.end(); ++it) {
        CommitNode* current = it->second.head;
        while (current) {
            if (current->hash == hash1) commit1 = current;
            if (current->hash == hash2) commit2 = current;
            current = current->parent;
        }
    }

    if (!commit1 || !commit2) {
        cout << "One or both commit hashes not found.\n";
        return;
    }

    map<string, string> files1, files2;
    for (size_t i = 0; i < commit1->files.size(); ++i) {
        files1[commit1->files[i].first] = commit1->files[i].second.hash;
    }
    for (size_t i = 0; i < commit2->files.size(); ++i) {
        files2[commit2->files[i].first] = commit2->files[i].second.hash;
    }
    set<string> allFiles;
    for (map<string, string>::iterator it = files1.begin(); it != files1.end(); ++it)
        allFiles.insert(it->first);
    for (map<string, string>::iterator it = files2.begin(); it != files2.end(); ++it)
        allFiles.insert(it->first);

    for (set<string>::iterator it = allFiles.begin(); it != allFiles.end(); ++it) {
        string fname = *it;
        string blob1 = files1.count(fname) ? readBlob(files1[fname]) : "";
        string blob2 = files2.count(fname) ? readBlob(files2[fname]) : "";

        if (blob1 == blob2) continue;

        cout << "Differences in file: " << fname << "\n";

        stringstream ss1(blob1), ss2(blob2);
        string line1, line2;
        int lineNum = 1;

        while (getline(ss1, line1) && getline(ss2, line2)) {
            if (line1 != line2) {
                cout << "Line " << lineNum << ":\n";
                cout << "- " << line1 << "\n";
                cout << "+ " << line2 << "\n";
            }
            ++lineNum;
        }

        while (getline(ss1, line1)) {
            cout << "Line " << lineNum++ << ":\n";
            cout << "- " << line1 << "\n";
        }

        while (getline(ss2, line2)) {
            cout << "Line " << lineNum++ << ":\n";
            cout << "+ " << line2 << "\n";
        }
        cout << "---------------------------\n";
    }
}

// Main Loop 
int main() {
    string command;
    cout << "Welcome to MiniGit!\n";
    while (true) {
        cout << "\n(minigit)> ";
        cin >> command;
        if (command == "init") {
            init();
        } else if (command == "add") {
            string fname;
            cin >> fname;
            add(fname);
        } else if (command == "commit") {
            string msg;
            getline(cin >> ws, msg);
            commit(msg);
        } else if (command == "log") {
            log();
        } else if (command == "branch") {
            string bname;
            cin >> bname;
            branch(bname);
        } else if (command == "checkout") {
            string bname;
            cin >> bname;
            checkout(bname);
        } else if (command == "merge") {
            string other;
            cin >> other;
            merge(other);
        } else if (command == "diff") {
            string h1, h2;
            cin >> h1 >> h2;
            diff(h1, h2);
        } else if (command == "exit") {
            break;
        } else {
            cout << "Unknown command.\n";
        }
    }
    return 0;
}
