#include <iostream>
#include <fstream>
#include <string>
#include <direct.h>  // for _mkdir
#include <ctime>     //for time
#include <vector>
#include <map>


// Data Structures 
struct Blob {
    string hash;
    string content;
};

struct CommitNode {
    string message;
    string timestamp;
    vector<pair<string, Blob>> files; // filename -> blob
    CommitNode* parent = nullptr;
    string hash;
};

void writeBlob(const string& content, const string& hash) {
    string path = ".minigit\\blobs\\" + hash;
    ofstream out(path.c_str());
    out << content;
}

string readBlob(const string& hash) {
    string path = ".minigit\\blobs\\" + hash;
    ifstream in(path.c_str());
    stringstream buffer;
    buffer << in.rdbuf();
    return buffer.str();
}

 // Commands
void init() {
    _mkdir(".minigit");
    _mkdir(".minigit\\blobs");

    CommitNode* first = new CommitNode();
    first->message = "Initial commit";
    first->timestamp = getCurrentTime();
    first->hash = generateHash(first);

    Branch mainBranch;
    mainBranch.name = "main";
    mainBranch.head = first;
    branches["main"] = mainBranch;
    currentBranch = &branches["main"];
    cout << "Repository initialized on branch 'main'\n";
}

void add(string filename) {
    ifstream file(filename.c_str());
    if (!file) {
        cout << "File does not exist.\n";
        return;
    }
    stagedFiles.push_back(filename);
    cout << "Staged: " << filename << "\n";
}


// Main Loop 
int main() {
    string command;
    cout << "Welcome to MiniGit!\n";
    while (true) {
        cout << "\n(minigit)> ";
        cin >> command;
        if (command == "init") {
            init();
        } else if (command == "add") {
            string fname;
            cin >> fname;
            add(fname);

  }
    return 0;
}
